from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import pandas as pd
import json
import tempfile
import os
from datetime import datetime
from typing import Optional, Dict, Any, List
import uvicorn

# Import du pipeline principal
import sys
sys.path.append('..')
from main_pipeline import PlanogramAIPipeline

# Initialisation de l'API
app = FastAPI(
    title="üè™ Planogramme IA API",
    description="API REST pour la g√©n√©ration automatique de planogrammes avec IA",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Variables globales
pipeline_instance = None
sample_data = None

# Types de meubles support√©s
FURNITURE_TYPES = {
    1: {"name": "planogram", "faces": 1, "description": "Planogramme standard"},
    2: {"name": "gondola", "faces": 2, "description": "Gondole 2 faces"},
    3: {"name": "shelves-display", "faces": 4, "description": "Pr√©sentoir √©tag√®res 4 faces"},
    4: {"name": "clothing-rack", "faces": 1, "description": "Portant v√™tements"},
    5: {"name": "wall-display", "faces": 1, "description": "Pr√©sentoir mural"},
    6: {"name": "accessory-display", "faces": 1, "description": "Pr√©sentoir accessoires"},
    7: {"name": "modular-cube", "faces": 1, "description": "Cube modulaire"},
    8: {"name": "table", "faces": 1, "description": "Table de pr√©sentation"},
    9: {"name": "refrigerator", "faces": 1, "description": "R√©frig√©rateur"},
    10: {"name": "refrigerated-showcase", "faces": 1, "description": "Vitrine r√©frig√©r√©e"},
    11: {"name": "clothing-display", "faces": 1, "description": "Pr√©sentoir v√™tements"},
    12: {"name": "clothing-wall", "faces": 1, "description": "Mur v√™tements"}
}

def generate_sample_data():
    """G√©n√®re des donn√©es d'exemple"""
    import numpy as np
    np.random.seed(42)
    n_samples = 50
    
    data = {
        'input_produit_id': [f'PROD_{i:03d}' for i in range(1, n_samples+1)],
        'input_nom_produit': [f'Produit {i}' for i in range(1, n_samples+1)],
        'input_prix_produit': np.random.uniform(5, 50, n_samples),
        'input_longueur_produit': np.random.uniform(10, 30, n_samples),
        'input_largeur_produit': np.random.uniform(5, 20, n_samples),
        'input_hauteur_produit': np.random.uniform(15, 35, n_samples),
        'input_priorite_merchandising': np.random.randint(1, 11, n_samples),
        'input_contrainte_temperature_produit': np.random.choice([0, 1], n_samples, p=[0.8, 0.2]),
        'input_magasin_id': np.random.choice(['MAG_001', 'MAG_002', 'MAG_003'], n_samples),
        'input_categorie_id': np.random.choice(['CAT_001', 'CAT_002', 'CAT_003'], n_samples),
        'input_surface_magasin': np.random.uniform(200, 800, n_samples),
        'input_longueur_zone': np.random.uniform(5, 15, n_samples),
        'input_largeur_zone': np.random.uniform(2, 5, n_samples),
    }
    
    return pd.DataFrame(data)

@app.on_event("startup")
async def startup_event():
    """Initialisation au d√©marrage"""
    global sample_data
    sample_data = generate_sample_data()
    print("üöÄ API Planogramme IA d√©marr√©e")

@app.get("/", response_class=HTMLResponse)
async def root():
    """Page d'accueil de l'API"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>üè™ Planogramme IA API</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { text-align: center; color: #333; margin-bottom: 30px; }
            .endpoint { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007bff; }
            .method { font-weight: bold; color: #007bff; }
            .description { color: #666; margin-top: 5px; }
            .footer { text-align: center; margin-top: 30px; color: #666; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üè™ Planogramme IA API</h1>
                <p>API REST pour la g√©n√©ration automatique de planogrammes avec Intelligence Artificielle</p>
            </div>
            
            <h2>üìã Endpoints Disponibles</h2>
            
            <div class="endpoint">
                <div class="method">GET /furniture-types</div>
                <div class="description">Liste des 12 types de meubles support√©s</div>
            </div>
            
            <div class="endpoint">
                <div class="method">GET /stores</div>
                <div class="description">Liste des magasins disponibles</div>
            </div>
            
            <div class="endpoint">
                <div class="method">GET /categories</div>
                <div class="description">Liste des cat√©gories de produits</div>
            </div>
            
            <div class="endpoint">
                <div class="method">POST /planogram/generate</div>
                <div class="description">G√©n√©ration d'un planogramme avec filtres optionnels</div>
            </div>
            
            <div class="endpoint">
                <div class="method">POST /planogram/upload-and-generate</div>
                <div class="description">Upload d'un fichier CSV et g√©n√©ration de planogramme</div>
            </div>
            
            <div class="endpoint">
                <div class="method">GET /planogram/stats</div>
                <div class="description">Statistiques g√©n√©rales du syst√®me</div>
            </div>
            
            <h2>üìñ Documentation</h2>
            <p>
                <a href="/docs" target="_blank">üìö Documentation Swagger</a> | 
                <a href="/redoc" target="_blank">üìã Documentation ReDoc</a>
            </p>
            
            <div class="footer">
                <p>D√©velopp√© avec FastAPI, XGBoost et Random Forest</p>
            </div>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/furniture-types")
async def get_furniture_types():
    """Retourne la liste des types de meubles support√©s"""
    return {
        "furniture_types": FURNITURE_TYPES,
        "total_types": len(FURNITURE_TYPES),
        "description": "12 types de meubles support√©s avec leurs caract√©ristiques"
    }

@app.get("/stores")
async def get_stores():
    """Retourne la liste des magasins disponibles"""
    global sample_data
    
    if sample_data is not None and 'input_magasin_id' in sample_data.columns:
        stores = sample_data['input_magasin_id'].unique().tolist()
        store_details = []
        
        for store_id in stores:
            store_data = sample_data[sample_data['input_magasin_id'] == store_id]
            store_details.append({
                "store_id": store_id,
                "products_count": len(store_data),
                "avg_surface": store_data['input_surface_magasin'].mean() if 'input_surface_magasin' in store_data.columns else 0
            })
        
        return {
            "stores": store_details,
            "total_stores": len(stores)
        }
    
    return {
        "stores": [
            {"store_id": "MAG_001", "products_count": 0, "avg_surface": 450},
            {"store_id": "MAG_002", "products_count": 0, "avg_surface": 320},
            {"store_id": "MAG_003", "products_count": 0, "avg_surface": 680}
        ],
        "total_stores": 3
    }

@app.get("/categories")
async def get_categories():
    """Retourne la liste des cat√©gories disponibles"""
    global sample_data
    
    if sample_data is not None and 'input_categorie_id' in sample_data.columns:
        categories = sample_data['input_categorie_id'].unique().tolist()
        category_details = []
        
        for category_id in categories:
            category_data = sample_data[sample_data['input_categorie_id'] == category_id]
            category_details.append({
                "category_id": category_id,
                "products_count": len(category_data),
                "avg_price": category_data['input_prix_produit'].mean() if 'input_prix_produit' in category_data.columns else 0
            })
        
        return {
            "categories": category_details,
            "total_categories": len(categories)
        }
    
    return {
        "categories": [
            {"category_id": "CAT_001", "products_count": 0, "avg_price": 25.5},
            {"category_id": "CAT_002", "products_count": 0, "avg_price": 18.3},
            {"category_id": "CAT_003", "products_count": 0, "avg_price": 32.1}
        ],
        "total_categories": 3
    }

@app.get("/zones")
async def get_zones():
    """Retourne la liste des zones disponibles"""
    return {
        "zones": [
            {"zone_id": "ZONE_001", "name": "All√©e Centrale", "type": "principale"},
            {"zone_id": "ZONE_002", "name": "Entr√©e Magasin", "type": "accueil"},
            {"zone_id": "ZONE_003", "name": "Fond de Magasin", "type": "stockage"},
            {"zone_id": "ZONE_004", "name": "Caisses", "type": "checkout"}
        ],
        "total_zones": 4
    }

@app.post("/planogram/generate")
async def generate_planogram(
    magasin_id: Optional[str] = Form(None),
    categorie_id: Optional[str] = Form(None),
    optimization_level: int = Form(3),
    apply_temperature_constraints: bool = Form(True)
):
    """G√©n√®re un planogramme avec les param√®tres sp√©cifi√©s"""
    global pipeline_instance, sample_data
    
    try:
        # Utilisation des donn√©es d'exemple si pas de donn√©es charg√©es
        if sample_data is None:
            sample_data = generate_sample_data()
        
        # Filtrage des donn√©es
        filtered_data = sample_data.copy()
        
        if magasin_id and 'input_magasin_id' in filtered_data.columns:
            filtered_data = filtered_data[filtered_data['input_magasin_id'] == magasin_id]
        
        if categorie_id and 'input_categorie_id' in filtered_data.columns:
            filtered_data = filtered_data[filtered_data['input_categorie_id'] == categorie_id]
        
        if filtered_data.empty:
            raise HTTPException(status_code=400, detail="Aucune donn√©e apr√®s filtrage")
        
        # Sauvegarde temporaire
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as tmp_file:
            filtered_data.to_csv(tmp_file.name, index=False)
            temp_path = tmp_file.name
        
        try:
            # Initialisation du pipeline
            pipeline_instance = PlanogramAIPipeline(temp_path)
            
            # G√©n√©ration
            results = pipeline_instance.run_filtered_pipeline(
                filtered_data,
                magasin_id=magasin_id or "MAG_001",
                categorie_id=categorie_id or "CAT_001"
            )
            
            if not results:
                raise HTTPException(status_code=500, detail="Erreur lors de la g√©n√©ration")
            
            # G√©n√©ration du JSON final
            json_output = pipeline_instance.generate_json_output(
                results,
                magasin_id=magasin_id or "MAG_001",
                categorie_id=categorie_id or "CAT_001"
            )
            
            return {
                "success": True,
                "message": "Planogramme g√©n√©r√© avec succ√®s",
                "planogram": json_output,
                "generation_params": {
                    "magasin_id": magasin_id,
                    "categorie_id": categorie_id,
                    "optimization_level": optimization_level,
                    "apply_temperature_constraints": apply_temperature_constraints,
                    "products_processed": len(filtered_data)
                }
            }
        
        finally:
            # Nettoyage du fichier temporaire
            if os.path.exists(temp_path):
                os.unlink(temp_path)
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la g√©n√©ration: {str(e)}")

@app.post("/planogram/upload-and-generate")
async def upload_and_generate(
    file: UploadFile = File(...),
    magasin_id: Optional[str] = Form(None),
    categorie_id: Optional[str] = Form(None),
    optimization_level: int = Form(3)
):
    """Upload un fichier CSV et g√©n√®re un planogramme"""
    global pipeline_instance
    
    if not file.filename.endswith('.csv'):
        raise HTTPException(status_code=400, detail="Le fichier doit √™tre au format CSV")
    
    try:
        # Lecture du fichier upload√©
        contents = await file.read()
        
        # Sauvegarde temporaire
        with tempfile.NamedTemporaryFile(mode='wb', suffix='.csv', delete=False) as tmp_file:
            tmp_file.write(contents)
            temp_path = tmp_file.name
        
        try:
            # Chargement des donn√©es
            data = pd.read_csv(temp_path)
            
            # Filtrage
            filtered_data = data.copy()
            
            if magasin_id and 'input_magasin_id' in filtered_data.columns:
                filtered_data = filtered_data[filtered_data['input_magasin_id'] == magasin_id]
            
            if categorie_id and 'input_categorie_id' in filtered_data.columns:
                filtered_data = filtered_data[filtered_data['input_categorie_id'] == categorie_id]
            
            if filtered_data.empty:
                raise HTTPException(status_code=400, detail="Aucune donn√©e apr√®s filtrage")
            
            # Sauvegarde des donn√©es filtr√©es
            filtered_temp_path = temp_path.replace('.csv', '_filtered.csv')
            filtered_data.to_csv(filtered_temp_path, index=False)
            
            # G√©n√©ration
            pipeline_instance = PlanogramAIPipeline(filtered_temp_path)
            
            results = pipeline_instance.run_filtered_pipeline(
                filtered_data,
                magasin_id=magasin_id or "MAG_001",
                categorie_id=categorie_id or "CAT_001"
            )
            
            if not results:
                raise HTTPException(status_code=500, detail="Erreur lors de la g√©n√©ration")
            
            json_output = pipeline_instance.generate_json_output(
                results,
                magasin_id=magasin_id or "MAG_001",
                categorie_id=categorie_id or "CAT_001"
            )
            
            return {
                "success": True,
                "message": "Fichier upload√© et planogramme g√©n√©r√© avec succ√®s",
                "file_info": {
                    "filename": file.filename,
                    "size": len(contents),
                    "rows_processed": len(filtered_data)
                },
                "planogram": json_output
            }
        
        finally:
            # Nettoyage des fichiers temporaires
            for path in [temp_path, temp_path.replace('.csv', '_filtered.csv')]:
                if os.path.exists(path):
                    os.unlink(path)
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors du traitement: {str(e)}")

@app.get("/planogram/stats")
async def get_planogram_stats():
    """Retourne les statistiques g√©n√©rales du syst√®me"""
    global sample_data
    
    if sample_data is None:
        sample_data = generate_sample_data()
    
    stats = {
        "system_info": {
            "version": "1.0.0",
            "supported_furniture_types": len(FURNITURE_TYPES),
            "ml_models": ["XGBoost", "Random Forest"],
            "last_updated": datetime.now().isoformat()
        },
        "data_stats": {
            "total_products": len(sample_data),
            "unique_stores": sample_data['input_magasin_id'].nunique() if 'input_magasin_id' in sample_data.columns else 0,
            "unique_categories": sample_data['input_categorie_id'].nunique() if 'input_categorie_id' in sample_data.columns else 0,
            "avg_product_price": sample_data['input_prix_produit'].mean() if 'input_prix_produit' in sample_data.columns else 0
        },
        "furniture_capabilities": {
            "max_faces_supported": max([info["faces"] for info in FURNITURE_TYPES.values()]),
            "refrigerated_types": [k for k, v in FURNITURE_TYPES.items() if "refrigerat" in v["name"]],
            "clothing_types": [k for k, v in FURNITURE_TYPES.items() if "clothing" in v["name"]]
        }
    }
    
    return stats

@app.get("/health")
async def health_check():
    """V√©rification de l'√©tat de l'API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

if __name__ == "__main__":
    print("üöÄ D√©marrage de l'API Planogramme IA...")
    print("üìñ Documentation disponible sur: http://localhost:8000/docs")
    print("üè† Page d'accueil: http://localhost:8000")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
