"""
Module de traitement et pr√©paration des donn√©es pour le syst√®me de planogramme IA
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from config import DATASET_PATH

class DataProcessor:
    def __init__(self, dataset_path=DATASET_PATH):
        """
        Initialise le processeur de donn√©es avec le chemin du dataset

        Args:
            dataset_path: Chemin vers le fichier CSV du dataset (utilise le chemin par d√©faut si non sp√©cifi√©)
        """
        self.dataset_path = dataset_path
        self.data = None
        self.preprocessor = None
        self.column_mapping = {}

        # Colonnes attendues avec des alternatives possibles
        self.expected_columns = {
            'magasin_id': ['input_magasin_id', 'magasin_id', 'store_id', 'id_magasin'],
            'magasin_nom': ['input_nom_magasin_magasin', 'input_nom_magasin', 'nom_magasin', 'magasin_nom', 'store_name'],
            'categorie_id': ['input_categorie_id', 'categorie_id', 'category_id', 'id_categorie'],
            'categorie_nom': ['input_nom_categorie', 'nom_categorie', 'category_name', 'categorie_nom'],
            'produit_id': ['input_produit_id', 'produit_id', 'product_id', 'id_produit'],
            'produit_nom': ['input_nom_produit', 'nom_produit', 'product_name', 'produit_nom'],
            'parent_categorie_id': ['input_parent_id_categorie', 'parent_id_categorie', 'parent_category_id'],
            'prix_produit': ['input_prix_produit', 'prix_produit', 'price', 'product_price'],
            'longueur_produit': ['input_longueur_produit', 'longueur_produit', 'length', 'product_length'],
            'largeur_produit': ['input_largeur_produit', 'largeur_produit', 'width', 'product_width'],
            'hauteur_produit': ['input_hauteur_produit', 'hauteur_produit', 'height', 'product_height'],
            'priorite_merchandising': ['input_priorite_merchandising', 'priorite_merchandising', 'priority'],
            'priorite_categorie': ['input_priorite_categorie', 'priorite_categorie', 'category_priority'],
            'quantite_stock': ['input_quantite_stock', 'quantite_stock', 'stock_quantity', 'stock'],
            'quantite_vente': ['input_quantite_vente', 'quantite_vente', 'sales_quantity', 'vente'],
            'zone_nom': ['input_nom_zone', 'nom_zone', 'zone_name', 'zone'],
            'temperature_zone': ['input_temperature_zone', 'temperature_zone', 'zone_temperature']
        }

    def _detect_separator(self, file_path):
        """
        D√©tecte automatiquement le s√©parateur du fichier CSV

        Args:
            file_path: Chemin vers le fichier CSV

        Returns:
            str: S√©parateur d√©tect√©
        """
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
                first_line = file.readline()

            # Compter les occurrences de diff√©rents s√©parateurs
            separators = [',', ';', '\t', '|']
            separator_counts = {}

            for sep in separators:
                separator_counts[sep] = first_line.count(sep)

            # Retourner le s√©parateur le plus fr√©quent
            detected_separator = max(separator_counts, key=separator_counts.get)
            print(f"S√©parateur d√©tect√©: '{detected_separator}' (occurrences: {separator_counts[detected_separator]})")

            return detected_separator
        except Exception as e:
            print(f"Erreur lors de la d√©tection du s√©parateur: {e}")
            return ','  # Valeur par d√©faut

    def _ensure_numeric(self, data, column_name):
        """
        Assure qu'une colonne est de type num√©rique

        Args:
            data: DataFrame contenant la colonne
            column_name: Nom de la colonne √† convertir

        Returns:
            Series: Colonne convertie en num√©rique
        """
        if column_name not in data.columns:
            print(f"‚ö†Ô∏è Colonne {column_name} non trouv√©e dans le DataFrame")
            return pd.Series([0.0] * len(data))

        try:
            # Convertir en string d'abord pour g√©rer tous les types
            series = data[column_name].astype(str)

            # Remplacer les virgules par des points (format europ√©en)
            series = series.str.replace(',', '.', regex=False)

            # Supprimer les caract√®res non num√©riques sauf le point d√©cimal et le signe moins
            series = series.str.replace(r'[^\d.-]', '', regex=True)

            # Convertir en num√©rique, les valeurs non convertibles deviennent NaN
            numeric_series = pd.to_numeric(series, errors='coerce')

            # Remplacer les NaN par 0
            numeric_series = numeric_series.fillna(0)

            print(f"‚úÖ Colonne {column_name} convertie en num√©rique: {numeric_series.dtype}")
            return numeric_series

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la conversion de {column_name}: {e}")
            return pd.Series([0.0] * len(data))

    def _convert_id_column(self, data, column_name):
        """
        Convertit une colonne d'ID (VARCHAR) en format utilisable pour les comparaisons

        Args:
            data: DataFrame contenant la colonne
            column_name: Nom de la colonne √† convertir

        Returns:
            Series: Colonne convertie
        """
        if column_name not in data.columns:
            print(f"‚ö†Ô∏è Colonne {column_name} non trouv√©e dans le DataFrame")
            return pd.Series([''] * len(data))

        try:
            # Convertir en string et nettoyer
            series = data[column_name].astype(str).str.strip()

            # Remplacer les valeurs nulles par des cha√Ænes vides
            series = series.replace(['nan', 'None', 'null', ''], '')

            print(f"‚úÖ Colonne ID {column_name} convertie en string")
            return series

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la conversion de {column_name}: {e}")
            return pd.Series([''] * len(data))

    def load_data(self):
        """
        Charge le dataset depuis le chemin sp√©cifi√©

        Returns:
            DataFrame: Le dataset charg√©
        """
        try:
            # D√©tecter le s√©parateur
            separator = self._detect_separator(self.dataset_path)

            # Essayer d'abord avec UTF-8
            try:
                self.data = pd.read_csv(self.dataset_path, encoding='utf-8', sep=separator)
            except UnicodeDecodeError:
                # Si UTF-8 √©choue, essayer avec latin-1 (ISO-8859-1)
                print("√âchec UTF-8, tentative avec l'encodage latin-1...")
                try:
                    self.data = pd.read_csv(self.dataset_path, encoding='latin-1', sep=separator)
                except UnicodeDecodeError:
                    # Si latin-1 √©choue, essayer avec cp1252 (Windows)
                    print("√âchec latin-1, tentative avec l'encodage cp1252...")
                    try:
                        self.data = pd.read_csv(self.dataset_path, encoding='cp1252', sep=separator)
                    except UnicodeDecodeError:
                        # En dernier recours, utiliser utf-8 avec gestion d'erreurs
                        print("√âchec cp1252, utilisation d'UTF-8 avec gestion d'erreurs...")
                        self.data = pd.read_csv(self.dataset_path, encoding='utf-8', errors='replace', sep=separator)

            print(f"Dataset charg√© avec succ√®s: {self.dataset_path}")
            print(f"S√©parateur utilis√©: '{separator}'")
            print(f"Dimensions: {self.data.shape}")
            print(f"Premi√®res colonnes: {list(self.data.columns[:10])}")

            # Mapper les colonnes
            self._map_columns()

            # Convertir les types de donn√©es selon les sp√©cifications
            self._convert_data_types()

            print(f"Colonnes mapp√©es: {len(self.column_mapping)}")
            return self.data
        except Exception as e:
            print(f"Erreur lors du chargement du dataset: {e}")
            raise

    def _convert_data_types(self):
        """
        Convertit les types de donn√©es selon les sp√©cifications fournies
        """
        print("üîÑ Conversion des types de donn√©es...")

        # Colonnes num√©riques (float/decimal/int)
        numeric_columns = [
            'input_prix_produit', 'input_longueur_produit', 'input_largeur_produit',
            'input_hauteur_produit', 'input_surface_magasin', 'input_longueur_magasin',
            'input_largeur_magasin', 'input_longueur_zone', 'input_largeur_zone',
            'input_hauteur_zone', 'input_quantite_stock', 'input_quantite_vente',
            'input_prix_unitaire_vente', 'input_montant_total_vente', 'input_visiteurs_conversionZone',
            'input_acheteurs_conversionZone', 'input_taux_conversion', 'input_quantite_mouvement',
            'input_cout_unitaire_mouvement', 'input_valeur_mouvement', 'input_espace_minimum_supplier',
            'input_visiteurs_heatmap', 'input_duree_moyenne_heatmap', 'input_intensite_heatmap',
            'output_largeur_planogramme', 'output_hauteur_planogramme'
        ]

        # Colonnes enti√®res
        integer_columns = [
            'input_promotion_id', 'input_mouvement_id', 'input_id_legal', 'input_id_event',
            'input_id_supplier', 'input_id_heatmap', 'output_nb_etageres_planogramme',
            'output_nb_colonnes_planogramme', 'output_position_prod_etagere', 'output_position_prod_colonne'
        ]

        # Colonnes d'ID (VARCHAR mais trait√©es comme des identifiants)
        id_columns = [
            'input_produit_id', 'input_categorie_id', 'input_parent_id_categorie',
            'input_magasin_id', 'input_zone_id'
        ]

        # Convertir les colonnes num√©riques
        for col in numeric_columns:
            if col in self.data.columns:
                self.data[col] = self._ensure_numeric(self.data, col)

        # Convertir les colonnes enti√®res
        for col in integer_columns:
            if col in self.data.columns:
                numeric_col = self._ensure_numeric(self.data, col)
                self.data[col] = numeric_col.astype(int)

        # Convertir les colonnes d'ID
        for col in id_columns:
            if col in self.data.columns:
                self.data[col] = self._convert_id_column(self.data, col)

        # Convertir les colonnes de priorit√© (ENUM vers num√©rique)
        priority_columns = ['input_priorite_merchandising', 'input_priorite_categorie']
        for col in priority_columns:
            if col in self.data.columns:
                self.data[col] = self._convert_priority_to_numeric(self.data, col)

        print("‚úÖ Conversion des types de donn√©es termin√©e")

    def _convert_priority_to_numeric(self, data, column_name):
        """
        Convertit une colonne de priorit√© (ENUM) en valeur num√©rique

        Args:
            data: DataFrame contenant la colonne
            column_name: Nom de la colonne √† convertir

        Returns:
            Series: Colonne convertie en num√©rique
        """
        if column_name not in data.columns:
            return pd.Series([5] * len(data))  # Priorit√© moyenne par d√©faut

        try:
            series = data[column_name].astype(str).str.lower().str.strip()

            # Mapping des valeurs textuelles vers des valeurs num√©riques
            priority_mapping = {
                'tr√®s faible': 1, 'tres faible': 1, 'very low': 1, '1': 1,
                'faible': 2, 'low': 2, '2': 2,
                'moyen': 3, 'moyenne': 3, 'medium': 3, '3': 3,
                '√©lev√©': 4, 'eleve': 4, 'high': 4, '4': 4,
                'tr√®s √©lev√©': 5, 'tres eleve': 5, 'very high': 5, '5': 5,
                'critique': 6, 'critical': 6, '6': 6,
                'maximum': 7, 'max': 7, '7': 7,
                'urgent': 8, '8': 8,
                'prioritaire': 9, '9': 9,
                'essentiel': 10, 'essential': 10, '10': 10
            }

            # Appliquer le mapping
            numeric_series = series.map(priority_mapping)

            # Pour les valeurs non mapp√©es, essayer de convertir directement en num√©rique
            mask = numeric_series.isna()
            if mask.any():
                direct_numeric = pd.to_numeric(series[mask], errors='coerce')
                numeric_series[mask] = direct_numeric

            # Remplacer les valeurs restantes par 5 (priorit√© moyenne)
            numeric_series = numeric_series.fillna(5)

            # S'assurer que les valeurs sont dans la plage 1-10
            numeric_series = numeric_series.clip(1, 10)

            print(f"‚úÖ Colonne de priorit√© {column_name} convertie")
            return numeric_series.astype(int)

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la conversion de priorit√© {column_name}: {e}")
            return pd.Series([5] * len(data))

    def _map_columns(self):
        """
        Mappe les colonnes du dataset aux noms attendus
        """
        available_columns = list(self.data.columns)
        print(f"Nombre de colonnes disponibles: {len(available_columns)}")
        print(f"Premi√®res colonnes du dataset: {available_columns[:10]}")

        for expected_name, possible_names in self.expected_columns.items():
            found = False
            for possible_name in possible_names:
                if possible_name in available_columns:
                    self.column_mapping[expected_name] = possible_name
                    found = True
                    print(f"‚úÖ {expected_name} -> {possible_name}")
                    break

        if not found:
            print(f"‚ö†Ô∏è  Colonne non trouv√©e pour '{expected_name}'. Alternatives recherch√©es: {possible_names}")

        print(f"Mapping des colonnes: {self.column_mapping}")

        # Debug sp√©cifique pour les colonnes produit
        if 'input_produit_id' in available_columns:
            sample_ids = self.data['input_produit_id'].head(3).tolist()
            print(f"üîç √âchantillon input_produit_id: {sample_ids}")

        if 'input_nom_produit' in available_columns:
            sample_names = self.data['input_nom_produit'].head(3).tolist()
            print(f"üîç √âchantillon input_nom_produit: {sample_names}")

        if 'input_description_produit' in available_columns:
            sample_descriptions = self.data['input_description_produit'].head(3).tolist()
            print(f"üîç √âchantillon input_description_produit: {sample_descriptions}")

    def get_column(self, expected_name):
        """
        R√©cup√®re le nom r√©el de la colonne dans le dataset

        Args:
            expected_name: Nom attendu de la colonne

        Returns:
            str: Nom r√©el de la colonne ou None si non trouv√©e
        """
        return self.column_mapping.get(expected_name)

    def filter_by_store_and_category(self, magasin_id, categorie_id, sous_categorie_id=None):
        """
        Filtre le dataset par magasin et cat√©gorie/sous-cat√©gorie

        Args:
            magasin_id: ID du magasin √† filtrer (peut √™tre string ou int)
            categorie_id: ID de la cat√©gorie √† filtrer (peut √™tre string ou int)
            sous_categorie_id: ID de la sous-cat√©gorie √† filtrer (optionnel)

        Returns:
            DataFrame: Dataset filtr√©
        """
        if self.data is None:
            self.load_data()

        # R√©cup√©rer les noms r√©els des colonnes
        magasin_id_col = self.get_column('magasin_id')
        categorie_id_col = self.get_column('categorie_id')
        parent_categorie_id_col = self.get_column('parent_categorie_id')

        if not magasin_id_col:
            raise ValueError("Colonne magasin_id non trouv√©e dans le dataset")
        if not categorie_id_col:
            raise ValueError("Colonne categorie_id non trouv√©e dans le dataset")

        # Cr√©er une copie pour √©viter les warnings
        data_copy = self.data.copy()

        # Convertir les IDs en string pour la comparaison (car ils sont en VARCHAR)
        magasin_id_str = str(magasin_id)
        categorie_id_str = str(categorie_id)

        print(f"üîç Filtrage par magasin: '{magasin_id_str}' et cat√©gorie: '{categorie_id_str}'")

        # Filtrer par magasin (comparaison de strings)
        filtered_data = data_copy[data_copy[magasin_id_col].astype(str) == magasin_id_str]
        print(f"Apr√®s filtrage magasin: {filtered_data.shape[0]} lignes")

        # Filtrer par cat√©gorie (comparaison de strings)
        filtered_data = filtered_data[filtered_data[categorie_id_col].astype(str) == categorie_id_str]
        print(f"Apr√®s filtrage cat√©gorie: {filtered_data.shape[0]} lignes")

        # Filtrer par sous-cat√©gorie si sp√©cifi√©e et si la colonne existe
        if sous_categorie_id is not None and parent_categorie_id_col:
            sous_categorie_id_str = str(sous_categorie_id)
            filtered_data = filtered_data[filtered_data[parent_categorie_id_col].astype(str) == sous_categorie_id_str]
            print(f"Apr√®s filtrage sous-cat√©gorie: {filtered_data.shape[0]} lignes")

        print(f"Dataset filtr√© final: {filtered_data.shape} lignes")
        return filtered_data

    def preprocess_data(self, data=None):
        """
        Pr√©traite les donn√©es pour l'entra√Ænement des mod√®les

        Args:
            data: DataFrame √† pr√©traiter (utilise self.data si non sp√©cifi√©)

        Returns:
            DataFrame: Donn√©es pr√©trait√©es
        """
        if data is None:
            if self.data is None:
                self.load_data()
            data = self.data.copy()  # Faire une copie pour √©viter de modifier l'original

        # Identifier les colonnes num√©riques et cat√©gorielles disponibles
        numerical_features = []
        categorical_features = []

        # Colonnes num√©riques - d√©j√† converties dans _convert_data_types
        numeric_column_names = ['prix_produit', 'longueur_produit', 'largeur_produit', 'hauteur_produit',
                               'priorite_merchandising', 'priorite_categorie', 'quantite_stock', 'quantite_vente']

        for feature in numeric_column_names:
            col_name = self.get_column(feature)
            if col_name and col_name in data.columns:
                numerical_features.append(col_name)

        # Colonnes cat√©gorielles
        for feature in ['categorie_nom', 'zone_nom']:
            col_name = self.get_column(feature)
            if col_name and col_name in data.columns:
                categorical_features.append(col_name)

        print(f"Colonnes num√©riques identifi√©es: {numerical_features}")
        print(f"Colonnes cat√©gorielles identifi√©es: {categorical_features}")

        if numerical_features or categorical_features:
            # Cr√©er un pipeline de pr√©traitement
            transformers = []

            if numerical_features:
                numerical_transformer = Pipeline(steps=[
                    ('scaler', StandardScaler())
                ])
                transformers.append(('num', numerical_transformer, numerical_features))

            if categorical_features:
                categorical_transformer = Pipeline(steps=[
                    ('onehot', OneHotEncoder(handle_unknown='ignore'))
                ])
                transformers.append(('cat', categorical_transformer, categorical_features))

            # Combiner les transformateurs
            self.preprocessor = ColumnTransformer(transformers=transformers)

        # Calculer des variables d√©riv√©es si les colonnes existent
        longueur_col = self.get_column('longueur_produit')
        largeur_col = self.get_column('largeur_produit')
        hauteur_col = self.get_column('hauteur_produit')

        if longueur_col and largeur_col and hauteur_col:
            try:
                data['volume_produit'] = data[longueur_col] * data[largeur_col] * data[hauteur_col]
                print("‚úÖ Variable 'volume_produit' calcul√©e")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du calcul du volume: {e}")
                data['volume_produit'] = 0.0

        quantite_vente_col = self.get_column('quantite_vente')
        quantite_stock_col = self.get_column('quantite_stock')

        if quantite_vente_col and quantite_stock_col:
            try:
                # Remplacer les z√©ros par 1 pour √©viter la division par z√©ro
                stock_safe = data[quantite_stock_col].replace(0, 1)
                data['rotation_stock'] = data[quantite_vente_col] / stock_safe
                print("‚úÖ Variable 'rotation_stock' calcul√©e")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors du calcul de la rotation: {e}")
                data['rotation_stock'] = 0.1

        # G√©rer les valeurs manquantes pour les colonnes num√©riques
        for col in numerical_features:
            if col in data.columns:
                median_value = data[col].median()
                if pd.isna(median_value):
                    median_value = 0
                data[col] = data[col].fillna(median_value)

        return data

    def get_available_stores(self):
        """
        R√©cup√®re la liste des magasins disponibles dans le dataset

        Returns:
            DataFrame: ID et noms des magasins disponibles
        """
        if self.data is None:
            self.load_data()

        magasin_id_col = self.get_column('magasin_id')
        magasin_nom_col = self.get_column('magasin_nom')

        if not magasin_id_col:
            raise ValueError(f"Colonne magasin_id non trouv√©e dans le dataset. Colonnes disponibles: {list(self.data.columns)}")

        if magasin_nom_col:
            stores = self.data[[magasin_id_col, magasin_nom_col]].drop_duplicates()
            stores.columns = ['input_magasin_id', 'input_nom_magasin_magasin']
        else:
            stores = self.data[[magasin_id_col]].drop_duplicates()
            stores['input_nom_magasin_magasin'] = stores[magasin_id_col].astype(str)
            stores.columns = ['input_magasin_id', 'input_nom_magasin_magasin']

        return stores

    def get_available_categories(self, magasin_id=None):
        """
        R√©cup√®re la liste des cat√©gories disponibles dans le dataset

        Args:
            magasin_id: ID du magasin pour filtrer les cat√©gories (optionnel)

        Returns:
            DataFrame: ID et noms des cat√©gories disponibles
        """
        if self.data is None:
            self.load_data()

        categorie_id_col = self.get_column('categorie_id')
        categorie_nom_col = self.get_column('categorie_nom')
        magasin_id_col = self.get_column('magasin_id')

        if not categorie_id_col:
            raise ValueError(f"Colonne categorie_id non trouv√©e dans le dataset. Colonnes disponibles: {list(self.data.columns)}")

        data_copy = self.data.copy()

        # Filtrer par magasin si sp√©cifi√© (comparaison de strings)
        if magasin_id is not None and magasin_id_col:
            magasin_id_str = str(magasin_id)
            filtered_data = data_copy[data_copy[magasin_id_col].astype(str) == magasin_id_str]
        else:
            filtered_data = data_copy

        if categorie_nom_col:
            categories = filtered_data[[categorie_id_col, categorie_nom_col]].drop_duplicates()
            categories.columns = ['input_categorie_id', 'input_nom_categorie']
        else:
            categories = filtered_data[[categorie_id_col]].drop_duplicates()
            categories['input_nom_categorie'] = categories[categorie_id_col].astype(str)
            categories.columns = ['input_categorie_id', 'input_nom_categorie']

        return categories

    def get_available_subcategories(self, categorie_id):
        """
        R√©cup√®re la liste des sous-cat√©gories disponibles pour une cat√©gorie

        Args:
            categorie_id: ID de la cat√©gorie parent

        Returns:
            DataFrame: ID et noms des sous-cat√©gories disponibles
        """
        if self.data is None:
            self.load_data()

        parent_categorie_id_col = self.get_column('parent_categorie_id')
        categorie_id_col = self.get_column('categorie_id')
        categorie_nom_col = self.get_column('categorie_nom')

        if not parent_categorie_id_col:
            return pd.DataFrame(columns=['input_categorie_id', 'input_nom_categorie'])

        data_copy = self.data.copy()
        categorie_id_str = str(categorie_id)

        # Filtrer les produits qui ont cette cat√©gorie comme parent (comparaison de strings)
        subcategories = data_copy[data_copy[parent_categorie_id_col].astype(str) == categorie_id_str]

        if subcategories.empty:
            return pd.DataFrame(columns=['input_categorie_id', 'input_nom_categorie'])

        if categorie_nom_col:
            subcategories = subcategories[[categorie_id_col, categorie_nom_col]].drop_duplicates()
            subcategories.columns = ['input_categorie_id', 'input_nom_categorie']
        else:
            subcategories = subcategories[[categorie_id_col]].drop_duplicates()
            subcategories['input_nom_categorie'] = subcategories[categorie_id_col].astype(str)
            subcategories.columns = ['input_categorie_id', 'input_nom_categorie']

        return subcategories
